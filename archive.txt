// We are picking up the span based on the id
const computerChoiceDisplay = document.getElementById('computer-choice');
const yourChoiceDisplay = document.getElementById('your-choice');
const resultDisplay = document.getElementById('result');


/* Finding HTML Elements by CSS Selectors. If you want to find all HTML elements that match a specified CSS selector 
(id, class names, types, attributes, values of attributes, etc), use the querySelectorAll() method. */
// I pick up all the buttons so that i can use them
const possibleChoices = document.querySelectorAll('button');


let yourChoice;
let computerChoice;
let myResult;

// I wanna grab each possible choice,and add event listener to listen to click
possibleChoices.forEach(possibleChoice => possibleChoice.addEventListener('click',(e) => {
    yourChoice= e.target.id; // whatever i click i want to get the id
    //event.target always refers to the element that triggered the event
    yourChoiceDisplay.innerHTML = yourChoice;
    generateComputerChoice();
    generateResult();
}));


function generateComputerChoice(){
    const randomNumber = Math.ceil(Math.random() * possibleChoices.length);
    switch(randomNumber){
        case 1:
            computerChoice= 'rock';
            break;
        case 2:
            computerChoice = 'paper';
            break;
        case 3:
            computerChoice = 'scissors';
            break;
    }
    computerChoiceDisplay.innerHTML = computerChoice;
};

function generateResult(){
    if(computerChoice == yourChoice){
        myResult = 'Draw!';
    }else if((computerChoice == 'rock' && yourChoice == 'paper') ||
             (computerChoice == 'paper' && yourChoice == 'scissors') ||
             (computerChoice == 'scissors' && yourChoice == 'rock')){
        myResult = 'You won!';
    }else{
        myResult = 'You lost!';
    }
    resultDisplay.innerHTML = myResult;       
};


/* HTML Events

An HTML event can be something the browser does, or something a user does.

Here are some examples of HTML events:

    An HTML web page has finished loading
    An HTML input field was changed
    An HTML button was clicked

Often, when events happen, you may want to do something.

JavaScript lets you execute code when events are detected. 

Event                   	Description
-------     -------------------------------------------
onchange 	    An HTML element has been changed
onclick 	    The user clicks an HTML element
onmouseover 	The user moves the mouse over an HTML element
onmouseout 	    The user moves the mouse away from an HTML element
onkeydown 	    The user pushes a keyboard key
onload 	        The browser has finished loading the page

JavaScript Event Handlers

Event handlers can be used to handle and verify user input, user actions, and browser actions:

    Things that should be done every time a page loads
    Things that should be done when the page is closed
    Action that should be performed when a user clicks a button
    Content that should be verified when a user inputs data
    And more ...


HTML DOM allows JavaScript to react to HTML events:
HTML Event Attributes

To assign events to HTML elements you can use event attributes.
Example

Assign an onclick event to a button element:
<button onclick="displayDate()">Try it</button> 

Assign Events Using the HTML DOM

The HTML DOM allows you to assign events to HTML elements using JavaScript:
Example

Assign an onclick event to a button element:
<script>
document.getElementById("myBtn").onclick = displayDate;
</script> 



The addEventListener() method attaches an event handler to the specified element.

The addEventListener() method attaches an event handler to an element without overwriting existing event handlers.

You can add many event handlers to one element.

You can add many event handlers of the same type to one element, i.e two "click" events.

You can add event listeners to any DOM object not only HTML elements. i.e the window object.

The addEventListener() method makes it easier to control how the event reacts to bubbling.

When using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.

You can easily remove an event listener by using the removeEventListener() method.

document.getElementById("myBtn").addEventListener("click", displayDate); 
*/